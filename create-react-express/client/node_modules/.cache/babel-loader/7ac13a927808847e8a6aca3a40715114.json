{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Mauro\\\\Bootcamp\\\\Projects\\\\project3\\\\create-react-express\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Mauro\\\\Bootcamp\\\\Projects\\\\project3\\\\create-react-express\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ErrorSerializer_1 = require(\"./ErrorSerializer\");\n\nvar Validator_1 = require(\"./Validator\");\n\nvar consts_1 = require(\"./consts\");\n\nvar axios_1 = __importDefault(require(\"axios\"));\n\nvar joi = require('joi');\n\nvar schema = joi.object().keys({\n  datatype: joi.any().valid('csv', 'json'),\n  outputsize: joi.any().valid('compact', 'full'),\n  interval: joi.any().valid('1min', '5min', '15min', '30min', '60min')\n});\n\nvar Stocks =\n/*#__PURE__*/\nfunction () {\n  function Stocks(alpha) {\n    _classCallCheck(this, Stocks);\n\n    this._interval = '5min';\n    this._alpha = alpha;\n  }\n  /**\n   * This API returns intraday time series (timestamp, open, high, low, close, volume) of the equity specified.\n   * @param ticker\n   * @param options\n   */\n\n\n  _createClass(Stocks, [{\n    key: \"intraday\",\n    value: function intraday(ticker) {\n      var _this = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new Promise(function (resolve, reject) {\n        if (!_this._alpha.hasApiKey()) reject(consts_1.NO_TOKEN);\n        if (ticker == '') reject(consts_1.NO_TICKER);\n        var options_err = Validator_1.Validator.validateOptions(options);\n\n        if (options_err) {\n          reject(ErrorSerializer_1.ErrorSerializer.ValidationError(options_err));\n        }\n\n        if (!options.hasOwnProperty('interval')) {\n          Object.assign(options, {\n            interval: _this._interval\n          });\n        }\n\n        _this.setRequiredOptions(options, 'TIME_SERIES_INTRADAY', ticker.toUpperCase());\n\n        axios_1.default.get(_this._alpha._url, {\n          params: options\n        }).then(function (res) {\n          resolve(res.data);\n        }).catch(function (err) {\n          reject(err.data);\n        });\n      });\n    }\n  }, {\n    key: \"daily\",\n    value: function daily(ticker) {\n      var _this2 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new Promise(function (resolve, reject) {\n        if (!_this2._alpha.hasApiKey()) reject(consts_1.NO_TOKEN);\n        if (ticker == '') reject(consts_1.NO_TICKER);\n        var options_err = Validator_1.Validator.validateOptions(options, 'interval');\n\n        if (options_err) {\n          reject(ErrorSerializer_1.ErrorSerializer.ValidationError(options_err));\n        }\n\n        _this2.setRequiredOptions(options, 'TIME_SERIES_DAILY', ticker.toUpperCase());\n\n        axios_1.default.get(_this2._alpha._url, {\n          params: options\n        }).then(function (res) {\n          resolve(res.data);\n        }).catch(function (err) {\n          reject(err.data);\n        });\n      });\n    }\n  }, {\n    key: \"dailyAdjusted\",\n    value: function dailyAdjusted(ticker) {\n      var _this3 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new Promise(function (resolve, reject) {\n        if (!_this3._alpha.hasApiKey()) reject(consts_1.NO_TOKEN);\n        if (ticker == '') reject(consts_1.NO_TICKER);\n        var options_err = Validator_1.Validator.validateOptions(options, ['interval', 'outputsize']);\n\n        if (options_err) {\n          reject(ErrorSerializer_1.ErrorSerializer.ValidationError(options_err));\n        }\n\n        _this3.setRequiredOptions(options, 'TIME_SERIES_DAILY_ADJUSTED', ticker.toUpperCase());\n\n        axios_1.default.get(_this3._alpha._url, {\n          params: options\n        }).then(function (res) {\n          resolve(res.data);\n        }).catch(function (err) {\n          reject(err.data);\n        });\n      });\n    }\n  }, {\n    key: \"weekly\",\n    value: function weekly(ticker) {\n      var _this4 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new Promise(function (resolve, reject) {\n        if (!_this4._alpha.hasApiKey()) reject(consts_1.NO_TOKEN);\n        if (ticker == '') reject(consts_1.NO_TICKER);\n        var options_err = Validator_1.Validator.validateOptions(options, ['interval', 'outputsize']);\n\n        if (options_err) {\n          reject(ErrorSerializer_1.ErrorSerializer.ValidationError(options_err));\n        }\n\n        _this4.setRequiredOptions(options, 'TIME_SERIES_WEEKLY', ticker.toUpperCase());\n\n        axios_1.default.get(_this4._alpha._url, {\n          params: options\n        }).then(function (res) {\n          resolve(res.data);\n        }).catch(function (err) {\n          reject(err.data);\n        });\n      });\n    }\n  }, {\n    key: \"weeklyAdjusted\",\n    value: function weeklyAdjusted(ticker) {\n      var _this5 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new Promise(function (resolve, reject) {\n        if (!_this5._alpha.hasApiKey()) reject(consts_1.NO_TOKEN);\n        if (ticker == '') reject(consts_1.NO_TICKER);\n        var options_err = Validator_1.Validator.validateOptions(options, ['interval', 'outputsize']);\n\n        if (options_err) {\n          reject(ErrorSerializer_1.ErrorSerializer.ValidationError(options_err));\n        }\n\n        _this5.setRequiredOptions(options, 'TIME_SERIES_WEEKLY_ADJUSTED', ticker.toUpperCase());\n\n        axios_1.default.get(_this5._alpha._url, {\n          params: options\n        }).then(function (res) {\n          resolve(res.data);\n        }).catch(function (err) {\n          reject(err.data);\n        });\n      });\n    }\n  }, {\n    key: \"monthly\",\n    value: function monthly(ticker) {\n      var _this6 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new Promise(function (resolve, reject) {\n        if (!_this6._alpha.hasApiKey()) reject(consts_1.NO_TOKEN);\n        if (ticker == '') reject(consts_1.NO_TICKER);\n        var options_err = Validator_1.Validator.validateOptions(options, ['interval', 'outputsize']);\n\n        if (options_err) {\n          reject(ErrorSerializer_1.ErrorSerializer.ValidationError(options_err));\n        }\n\n        _this6.setRequiredOptions(options, 'TIME_SERIES_MONTHLY', ticker.toUpperCase());\n\n        axios_1.default.get(_this6._alpha._url, {\n          params: options\n        }).then(function (res) {\n          resolve(res.data);\n        }).catch(function (err) {\n          reject(err.data);\n        });\n      });\n    }\n  }, {\n    key: \"monthlyAdjusted\",\n    value: function monthlyAdjusted(ticker) {\n      var _this7 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new Promise(function (resolve, reject) {\n        if (!_this7._alpha.hasApiKey()) reject(consts_1.NO_TOKEN);\n        if (ticker == '') reject(consts_1.NO_TICKER);\n        var options_err = Validator_1.Validator.validateOptions(options, ['interval', 'outputsize']);\n\n        if (options_err) {\n          reject(ErrorSerializer_1.ErrorSerializer.ValidationError(options_err));\n        }\n\n        _this7.setRequiredOptions(options, 'TIME_SERIES_MONTHLY_ADJUSTED', ticker.toUpperCase());\n\n        axios_1.default.get(_this7._alpha._url, {\n          params: options\n        }).then(function (res) {\n          resolve(res.data);\n        }).catch(function (err) {\n          reject(err.data);\n        });\n      });\n    }\n  }, {\n    key: \"quote\",\n    value: function quote(ticker) {\n      var _this8 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new Promise(function (resolve, reject) {\n        if (!_this8._alpha.hasApiKey()) reject(consts_1.NO_TOKEN);\n        var options_err = Validator_1.Validator.validateOptions(options, ['interval', 'outputsize']);\n\n        if (options_err) {\n          reject(ErrorSerializer_1.ErrorSerializer.ValidationError(options_err));\n        }\n\n        _this8.setRequiredOptions(options, 'GLOBAL_QUOTE', ticker.toUpperCase());\n\n        axios_1.default.get(_this8._alpha._url, {\n          params: options\n        }).then(function (res) {\n          resolve(res.data);\n        }).catch(function (err) {\n          reject(err.data);\n        });\n      });\n    }\n  }, {\n    key: \"search\",\n    value: function search(ticker) {\n      var _this9 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new Promise(function (resolve, reject) {\n        if (!_this9._alpha.hasApiKey()) reject(consts_1.NO_TOKEN);\n        if (ticker == '') reject(consts_1.NO_TICKER);\n        var options_err = Validator_1.Validator.validateOptions(options, ['interval', 'outputsize']);\n\n        if (options_err) {\n          reject(ErrorSerializer_1.ErrorSerializer.ValidationError(options_err));\n        }\n\n        _this9.setRequiredOptionsSearch(options, 'SYMBOL_SEARCH', ticker.toUpperCase());\n\n        axios_1.default.get(_this9._alpha._url, {\n          params: options\n        }).then(function (res) {\n          resolve(res.data);\n        }).catch(function (err) {\n          reject(err.data);\n        });\n      });\n    }\n  }, {\n    key: \"setRequiredOptions\",\n    value: function setRequiredOptions(options, func, symbol) {\n      Object.assign(options, {\n        function: func,\n        symbol: symbol.toUpperCase(),\n        apikey: this._alpha._apiKey\n      });\n    }\n  }, {\n    key: \"setRequiredOptionsSearch\",\n    value: function setRequiredOptionsSearch(options, func, symbol) {\n      Object.assign(options, {\n        function: func,\n        keywords: symbol.toUpperCase(),\n        apikey: this._alpha._apiKey\n      });\n    }\n  }]);\n\n  return Stocks;\n}();\n\nexports.Stocks = Stocks;","map":null,"metadata":{},"sourceType":"script"}