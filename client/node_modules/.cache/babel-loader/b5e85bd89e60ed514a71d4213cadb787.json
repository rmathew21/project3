{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Mauro\\\\Bootcamp\\\\Projects\\\\project3\\\\create-react-express\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Mauro\\\\Bootcamp\\\\Projects\\\\project3\\\\create-react-express\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar joi = require('joi');\n\nvar util_1 = require(\"util\");\n\nvar _schema = joi.object().keys({\n  datatype: joi.any().valid('csv', 'json'),\n  outputsize: joi.any().valid('compact', 'full'),\n  interval: joi.any().valid('1min', '5min', '15min', '30min', '60min')\n});\n\nvar _schemaTechInd = joi.object().keys({\n  datatype: joi.any().valid('csv', 'json'),\n  interval: joi.any().valid('1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly'),\n  series_type: joi.any().valid('close', 'open', 'high', 'low'),\n  time_period: joi.number().integer()\n});\n\nvar _schemaBBands = _schemaTechInd.keys({\n  nbdevup: joi.number().positive(),\n  nbdevdn: joi.number().positive(),\n  matype: joi.number().min(0).max(8)\n});\n\nvar _schemaMAMA = _schemaTechInd.keys({\n  fastlimit: joi.number().positive().precision(2),\n  slowlimit: joi.number().positive().precision(2)\n});\n\nvar _schemaMACD = _schemaTechInd.keys({\n  fastperiod: joi.number().positive(),\n  slowperiod: joi.number().positive(),\n  signalperiod: joi.number().positive()\n});\n\nvar _schemaMACDEXT = _schemaMACD.keys({\n  fastmatype: joi.number().min(0).max(8),\n  slowmatype: joi.number().min(0).max(8),\n  signalmatype: joi.number().min(0).max(8)\n});\n\nvar _schemaSTOCH = _schemaTechInd.keys({\n  fastkperiod: joi.number().positive(),\n  slowkperiod: joi.number().positive(),\n  slowdperiod: joi.number().positive(),\n  slowkmatype: joi.number().min(0).max(8),\n  slowdmatype: joi.number().min(0).max(8)\n});\n\nvar Validator =\n/*#__PURE__*/\nfunction () {\n  function Validator() {\n    _classCallCheck(this, Validator);\n  }\n\n  _createClass(Validator, null, [{\n    key: \"validateOptions\",\n    value: function validateOptions(options) {\n      var forbiddenKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      if (options == {}) {\n        return null;\n      }\n\n      var err = null;\n\n      if (util_1.isNullOrUndefined(forbiddenKeys) || forbiddenKeys == '') {\n        var _joi$validate = joi.validate(options, _schema),\n            error = _joi$validate.error;\n\n        err = error;\n      } else {\n        var _joi$validate2 = joi.validate(options, _schema.forbiddenKeys(forbiddenKeys)),\n            _error = _joi$validate2.error;\n\n        err = _error;\n      }\n\n      return err;\n    }\n  }, {\n    key: \"validateTechInd\",\n    value: function validateTechInd(options) {\n      var schema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '_schema';\n      var forbiddenKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n      if (options == {}) {\n        return null;\n      }\n\n      var err = null;\n\n      var _s = this.getSchema(schema);\n\n      if (util_1.isNullOrUndefined(forbiddenKeys) || forbiddenKeys == '') {\n        var _joi$validate3 = joi.validate(options, _s),\n            error = _joi$validate3.error;\n\n        err = error;\n      } else {\n        var _joi$validate4 = joi.validate(options, _s.forbiddenKeys(forbiddenKeys)),\n            _error2 = _joi$validate4.error;\n\n        err = _error2;\n      }\n\n      return err;\n    }\n  }, {\n    key: \"getSchema\",\n    value: function getSchema(schema) {\n      if (schema == '_schema') {\n        return _schemaTechInd;\n      }\n\n      if (schema.toLowerCase() == 'mama') {\n        return _schemaMAMA;\n      }\n\n      if (schema.toLowerCase() == 'macd') {\n        return _schemaMACD;\n      }\n\n      if (schema.toLowerCase() == 'macdext') {\n        return _schemaMACDEXT;\n      }\n\n      if (schema.toLowerCase() == 'bands') {\n        return _schemaBBands;\n      }\n\n      if (schema.toLowerCase() == 'stoch') {\n        return _schemaSTOCH;\n      }\n    }\n  }]);\n\n  return Validator;\n}();\n\nexports.Validator = Validator;","map":null,"metadata":{},"sourceType":"script"}