{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Mauro\\\\Bootcamp\\\\Projects\\\\project3\\\\create-react-express\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Mauro\\\\Bootcamp\\\\Projects\\\\project3\\\\create-react-express\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ErrorSerializer_1 = require(\"./ErrorSerializer\");\n\nvar Validator_1 = require(\"./Validator\");\n\nvar consts_1 = require(\"./consts\");\n\nvar axios_1 = __importDefault(require(\"axios\"));\n\nvar Forex =\n/*#__PURE__*/\nfunction () {\n  function Forex(alpha) {\n    _classCallCheck(this, Forex);\n\n    this._interval = '5min';\n    this._alpha = alpha;\n  }\n\n  _createClass(Forex, [{\n    key: \"exchageRate\",\n    value: function exchageRate(baseCurrency, destinationCurrency) {\n      var _this = this;\n\n      return new Promise(function (reject, resolve) {\n        if (!_this._alpha.hasApiKey()) reject(consts_1.NO_TOKEN);\n        if (baseCurrency == '') reject(consts_1.NO_BASE_CURRENCY);\n        if (destinationCurrency == '') reject(consts_1.NO_DESTINATION_CURRENCY);\n        var options = {\n          apikey: _this._alpha._apiKey,\n          function: 'CURRENCY_EXCHANGE_RATE',\n          from_currency: baseCurrency.toUpperCase(),\n          to_currency: destinationCurrency.toUpperCase()\n        };\n        axios_1.default.get(_this._alpha._url, {\n          params: options\n        }).then(function (res) {\n          resolve(res.data);\n        }).catch(function (err) {\n          reject(err.data);\n        });\n      });\n    }\n  }, {\n    key: \"intraday\",\n    value: function intraday(baseCurrency, destinationCurrency) {\n      var _this2 = this;\n\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return new Promise(function (reject, resolve) {\n        if (!_this2._alpha.hasApiKey()) reject(consts_1.NO_TOKEN);\n        if (baseCurrency == '') reject(consts_1.NO_BASE_CURRENCY);\n        if (destinationCurrency == '') reject(consts_1.NO_DESTINATION_CURRENCY);\n        var options_err = Validator_1.Validator.validateOptions(options);\n\n        if (options_err) {\n          reject(ErrorSerializer_1.ErrorSerializer.ValidationError(options_err));\n        }\n\n        if (!options.hasOwnProperty('interval')) {\n          Object.assign(options, {\n            interval: _this2._interval\n          });\n        }\n\n        _this2.setRequiredOptions(options, 'FX_INTRADAY', baseCurrency, destinationCurrency);\n\n        axios_1.default.get(_this2._alpha._url, {\n          params: options\n        }).then(function (res) {\n          resolve(res.data);\n        }).catch(function (err) {\n          reject(err.data);\n        });\n      });\n    }\n  }, {\n    key: \"daily\",\n    value: function daily(baseCurrency, destinationCurrency) {\n      var _this3 = this;\n\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return new Promise(function (reject, resolve) {\n        if (!_this3._alpha.hasApiKey()) reject(consts_1.NO_TOKEN);\n        if (baseCurrency == '') reject(consts_1.NO_BASE_CURRENCY);\n        if (destinationCurrency == '') reject(consts_1.NO_DESTINATION_CURRENCY);\n        var options_err = Validator_1.Validator.validateOptions(options, 'interval');\n\n        if (options_err) {\n          reject(ErrorSerializer_1.ErrorSerializer.ValidationError(options_err));\n        }\n\n        _this3.setRequiredOptions(options, 'FX_DAILY', baseCurrency, destinationCurrency);\n\n        axios_1.default.get(_this3._alpha._url, {\n          params: options\n        }).then(function (res) {\n          resolve(res.data);\n        }).catch(function (err) {\n          reject(err.data);\n        });\n      });\n    }\n  }, {\n    key: \"weekly\",\n    value: function weekly(baseCurrency, destinationCurrency) {\n      var _this4 = this;\n\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return new Promise(function (reject, resolve) {\n        if (!_this4._alpha.hasApiKey()) reject(consts_1.NO_TOKEN);\n        if (baseCurrency == '') reject(consts_1.NO_BASE_CURRENCY);\n        if (destinationCurrency == '') reject(consts_1.NO_DESTINATION_CURRENCY);\n        var options_err = Validator_1.Validator.validateOptions(options, ['interval', 'outputsize']);\n\n        if (options_err) {\n          reject(ErrorSerializer_1.ErrorSerializer.ValidationError(options_err));\n        }\n\n        _this4.setRequiredOptions(options, 'FX_WEEKLY', baseCurrency, destinationCurrency);\n\n        axios_1.default.get(_this4._alpha._url, {\n          params: options\n        }).then(function (res) {\n          resolve(res.data);\n        }).catch(function (err) {\n          reject(err.data);\n        });\n      });\n    }\n  }, {\n    key: \"monthly\",\n    value: function monthly(baseCurrency, destinationCurrency) {\n      var _this5 = this;\n\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return new Promise(function (reject, resolve) {\n        if (!_this5._alpha.hasApiKey()) reject(consts_1.NO_TOKEN);\n        if (baseCurrency == '') reject(consts_1.NO_BASE_CURRENCY);\n        if (destinationCurrency == '') reject(consts_1.NO_DESTINATION_CURRENCY);\n        var options_err = Validator_1.Validator.validateOptions(options, ['interval', 'outputsize']);\n\n        if (options_err) {\n          reject(ErrorSerializer_1.ErrorSerializer.ValidationError(options_err));\n        }\n\n        _this5.setRequiredOptions(options, 'FX_MONTHLY', baseCurrency, destinationCurrency);\n\n        axios_1.default.get(_this5._alpha._url, {\n          params: options\n        }).then(function (res) {\n          resolve(res.data);\n        }).catch(function (err) {\n          reject(err.data);\n        });\n      });\n    }\n  }, {\n    key: \"setRequiredOptions\",\n    value: function setRequiredOptions(options, func, from, to) {\n      Object.assign(options, {\n        function: func,\n        from_symbol: from.toUpperCase(),\n        to_symbol: to.toUpperCase(),\n        apikey: this._alpha._apiKey\n      });\n    }\n  }]);\n\n  return Forex;\n}();\n\nexports.Forex = Forex;","map":null,"metadata":{},"sourceType":"script"}