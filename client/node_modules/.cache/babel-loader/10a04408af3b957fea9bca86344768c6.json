{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Mauro\\\\Bootcamp\\\\Projects\\\\project3\\\\create-react-express\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\Mauro\\\\Bootcamp\\\\Projects\\\\project3\\\\create-react-express\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Mauro\\\\Bootcamp\\\\Projects\\\\project3\\\\create-react-express\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Mauro\\\\Bootcamp\\\\Projects\\\\project3\\\\create-react-express\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Mauro\\\\Bootcamp\\\\Projects\\\\project3\\\\create-react-express\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Mauro\\\\Bootcamp\\\\Projects\\\\project3\\\\create-react-express\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mauro\\\\Bootcamp\\\\Projects\\\\project3\\\\create-react-express\\\\client\\\\src\\\\components\\\\Apexcharts.js\";\nimport React, { Component } from \"react\"; // import \"./App.css\";\n// import ApexCharts from 'apexcharts'\n\nimport Chart from \"react-apexcharts\"; // Package to interact with ALpha API\n\nvar Alpha = require('alpha_vantage_api_wrapper').Alpha;\n\nvar alpha = new Alpha('AIzaSyD38Bm-q_7x8vDGceYzZUntAR4QlgukMvQ');\n\nvar Stockchart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Stockchart, _Component);\n\n  function Stockchart(props) {\n    var _this;\n\n    _classCallCheck(this, Stockchart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Stockchart).call(this, props));\n    _this.state = {\n      options: {\n        chart: {\n          id: \"basic-line\",\n          height: 400,\n          width: \"80%\",\n          stacked: false,\n          zoom: {\n            enabled: true,\n            type: 'x',\n            autoScaleYaxis: false,\n            zoomedArea: {\n              fill: {\n                color: '#90CAF9',\n                opacity: 0.4\n              },\n              stroke: {\n                color: '#0D47A1',\n                opacity: 0.4,\n                width: 1\n              }\n            }\n          },\n          toolbar: {\n            autoSelected: 'zoom'\n          }\n        },\n        xaxis: {\n          type: 'categories',\n          labels: {\n            show: false,\n            trim: true,\n            hideOverlappingLabels: true\n          },\n          tickAmount: 12,\n          axisTicks: {\n            show: false,\n            borderType: 'solid',\n            color: '#78909C',\n            height: 6,\n            offsetX: 0,\n            offsetY: 0\n          },\n          // type: 'datetime',\n          // tickAmount: 20,\n          categories: []\n        }\n      },\n      series: [{\n        name: \"Price\",\n        data: []\n      }]\n    };\n    return _this;\n  }\n\n  _createClass(Stockchart, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var self = this;\n      alpha.stocks.intraday('MSFT').then(function (response) {\n        // Do what you want with the data\n        console.log(response);\n        var timeArr = Object.keys(response[\"Time Series (5min)\"]); //This is an array of the dates  \n\n        var newTimeArr = timeArr.reverse();\n        console.log(newTimeArr);\n        var ValzArr = Object.values(response['Time Series (5min)']); //This is an array of the values of each key in time series object\n\n        var priceArr = [];\n        ValzArr.forEach(function (obj, index) {\n          var closePrice = parseFloat(obj['4. close']); //Declare/Grabs the close price of each object in array\n          // console.log(closePrice)\n\n          priceArr.push(closePrice); //Pushes the close price to a new array\n        }); //closes the foreach function\n\n        var newPriceArr = priceArr.reverse();\n        console.log(newPriceArr);\n        self.setState(function (prevState) {\n          return {\n            options: _objectSpread({}, prevState.options, prevState.options, {\n              xaxis: _objectSpread({}, prevState.options.xaxis, {\n                categories: newTimeArr // categories: newTimeArr\n\n              })\n            }),\n            series: [_objectSpread({}, prevState.series, {\n              data: newPriceArr // data: newPriceArr\n\n            })] // data: newPriceArr\n\n          };\n        });\n      }) //closes the .then promise\n      .catch(function (err) {\n        // Handle the error\n        console.log(\"Error occurred at: \".concat(err));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"mixed-chart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(Chart, {\n        options: this.state.options,\n        series: this.state.series,\n        type: \"line\",\n        width: this.state.options.chart.width,\n        height: this.state.options.chart.height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return Stockchart;\n}(Component);\n\nexport default Stockchart;","map":{"version":3,"sources":["C:\\Users\\Mauro\\Bootcamp\\Projects\\project3\\create-react-express\\client\\src\\components\\Apexcharts.js"],"names":["React","Component","Chart","Alpha","require","alpha","Stockchart","props","state","options","chart","id","height","width","stacked","zoom","enabled","type","autoScaleYaxis","zoomedArea","fill","color","opacity","stroke","toolbar","autoSelected","xaxis","labels","show","trim","hideOverlappingLabels","tickAmount","axisTicks","borderType","offsetX","offsetY","categories","series","name","data","self","stocks","intraday","then","response","console","log","timeArr","Object","keys","newTimeArr","reverse","ValzArr","values","priceArr","forEach","obj","index","closePrice","parseFloat","push","newPriceArr","setState","prevState","catch","err"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\n// import \"./App.css\";\n// import ApexCharts from 'apexcharts'\nimport Chart from \"react-apexcharts\";\n// Package to interact with ALpha API\nvar Alpha = require('alpha_vantage_api_wrapper').Alpha\nvar alpha = new Alpha('AIzaSyD38Bm-q_7x8vDGceYzZUntAR4QlgukMvQ')\n\nclass Stockchart extends Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        options: {\n          chart: {\n            id: \"basic-line\",\n            height: 400,\n            width: \"80%\",\n            stacked: false,\n            zoom: {\n              enabled: true,\n              type: 'x',  \n              autoScaleYaxis: false,  \n              zoomedArea: {\n                fill: {\n                  color: '#90CAF9',\n                  opacity: 0.4\n                },\n                stroke: {\n                  color: '#0D47A1',\n                  opacity: 0.4,\n                  width: 1\n                }\n              }\n          },\n            toolbar: {\n              autoSelected: 'zoom'\n            }\n            \n          },\n          xaxis: {\n            type: 'categories',\n            labels: {\n              show: false,\n              trim: true,\n              hideOverlappingLabels: true\n            },\n            tickAmount: 12,\n            axisTicks: {\n              show: false,\n              borderType: 'solid',\n              color: '#78909C',\n              height: 6,\n              offsetX: 0,\n              offsetY: 0\n          },\n            // type: 'datetime',\n            // tickAmount: 20,\n            categories: []\n          }\n        },\n        series: [\n          {\n            name: \"Price\",\n            data: []\n          }\n        ]\n      };\n    };\n\n    componentWillMount() {\n      const self = this;\n\n\n      alpha.stocks.intraday('MSFT')\n      .then((response) => {\n          // Do what you want with the data\n          console.log(response)\n\n \n          const timeArr = Object.keys(response[\"Time Series (5min)\"]); //This is an array of the dates  \n          const newTimeArr = timeArr.reverse();\n          console.log(newTimeArr)\n\n          \n          const ValzArr = Object.values(response['Time Series (5min)']);//This is an array of the values of each key in time series object\n      const priceArr = [];  \n\n          ValzArr.forEach((obj, index) => {\n            const closePrice = parseFloat(obj['4. close']);//Declare/Grabs the close price of each object in array\n      // console.log(closePrice)\n            priceArr.push(closePrice);//Pushes the close price to a new array\n      });//closes the foreach function\n\n      const newPriceArr = priceArr.reverse();\n      console.log(newPriceArr)        \n      \n\n      self.setState(prevState => ({\n        options: {\n          ...prevState.options,\n         ...prevState.options,xaxis: {\n           ...prevState.options.xaxis,\n            categories: newTimeArr\n\n          }\n          // categories: newTimeArr\n        },\n        series: [{\n          ...prevState.series,\n          data: newPriceArr\n        }\n          // data: newPriceArr\n        ]\n        // data: newPriceArr\n      }))\n\n      })//closes the .then promise\n      .catch((err) => {\n          // Handle the error\n          console.log(`Error occurred at: ${err}`);\n      })\n      \n    }\n\n\n    render() {\n      return (\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"container\">\n            <div className=\"mixed-chart\">\n              <Chart\n                options={this.state.options}\n                series={this.state.series}\n                type=\"line\"\n                width={this.state.options.chart.width}\n                height={this.state.options.chart.height}\n              />\n            </div>\n            </div>\n            \n          </div>\n        </div>\n      );\n    }\n  }\n\n  export default Stockchart;"]},"metadata":{},"sourceType":"module"}